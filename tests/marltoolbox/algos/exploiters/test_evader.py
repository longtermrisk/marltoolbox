import pytest

from evader_utils import *


def test_copy_weights_at_start_of_exploitation():
    evader, start_exploit_at_step_n, _ = given_an_evader_policy()

    evader = when_reaching_the_start_of_exploitation(
        evader,
        start_exploit_at_step_n)

    assert_weights_of_both_policies_are_equal(evader)


def test_dont_copy_weights_before_start_of_exploitation():
    evader, start_exploit_at_step_n, _ = given_an_evader_policy()

    for _ in range(10):
        evader = when_before_the_start_of_exploitation(
            evader, start_exploit_at_step_n)

        assert_weights_of_both_policies_are_not_equal(evader)


def test_copy_weights_every_n_env_steps():
    evader, start_exploit_at_step_n, copy_weights_every_n_steps = \
        given_an_evader_policy()

    for nth_repetition in range(1, 10):
        evader = when_every_n_step_after_start_of_exploitation(
            evader,
            start_exploit_at_step_n,
            copy_weights_every_n_steps,
            nth_repetition)

        assert_weights_of_both_policies_are_equal(evader)


def test_copy_weights_only_every_n_env_steps():
    evader, start_exploit_at_step_n, copy_weights_every_n_steps = \
        given_an_evader_policy()

    for nth_repetition in range(1, 4):
        for _ in range(3):
            evader = when_in_between_n_step_after_start_of_exploitation(
                evader,
                start_exploit_at_step_n,
                copy_weights_every_n_steps,
                nth_repetition)

            assert_weights_of_both_policies_are_not_equal(evader)


def test_evader_policy_configuration_helper_wt_specify_trainer_config():
    rllib_policy = given_the_config_of_an_rllib_policy()

    evader_policy_config = \
        when_using_the_helper_to_create_an_evader_policy_config(
            exploiter_policy=rllib_policy)

    assert_that_the_policy_config_is_conform(evader_policy_config)


@pytest.mark.skip(reason="waiting to refactor welfare functions")
def test_evader_policy_configuration_helper_wt_specify_welfare_function():
    for welfare_function in given_a_welfare_function():
        evader_policy_config = \
            when_using_the_helper_to_create_an_evader_policy_config(
                welfare_function=welfare_function)

        assert_that_the_policy_config_is_conform(evader_policy_config,
                                                 welfare_function)


@pytest.mark.skip(reason="waiting to refactor welfare functions")
def test_evader_policy_configuration_helper_wt_manually_specified_cooperation():
    cooperative_policy_config_update = given_a_config_to_set_cooperation()

    evader_policy_config = \
        when_using_the_helper_to_create_an_evader_policy_config(
            cooperative_policy_config_update=cooperative_policy_config_update)

    assert_that_the_policy_config_is_conform(evader_policy_config)
